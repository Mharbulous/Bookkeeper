rules_version = '2';

// Firebase Storage Rules for Multi-Tenant Team Architecture
// Supports solo users (teamId === userId) and multi-user teams
service firebase.storage {
  match /b/{bucket}/o {
    
    // Team-based file storage: /teams/{teamId}/matters/{matterId}/{fileName}
    match /teams/{teamId}/matters/{matterId}/{fileName} {
      // Allow read/write if user belongs to the team
      allow read, write: if request.auth != null && 
        (
          // Check custom claims for teamId (preferred)
          request.auth.token.teamId == teamId ||
          // Fallback: For solo users, allow if teamId matches userId
          (teamId == request.auth.uid)
        );
    }
    
    // Team-based general storage: /teams/{teamId}/{fileName} (if needed)
    match /teams/{teamId}/{fileName} {
      allow read, write: if request.auth != null && 
        (
          request.auth.token.teamId == teamId ||
          teamId == request.auth.uid
        );
    }
    
    // Legacy support: /users/{userId}/{fileName} (if migrating from old structure)
    match /users/{userId}/{fileName} {
      // Allow users to access their own legacy files
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Global admin access (optional - for super admins)
    match /{allPaths=**} {
      allow read, write: if request.auth != null && 
        request.auth.token.role == 'superadmin';
    }
    
    // Default: deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}